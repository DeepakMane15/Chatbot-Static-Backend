#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('generator:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server, {cors: {origin : "*"}});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

io.on("connection", (socket) =>{
  socket.on('join', (data) => {
    console.log("from agent login " + data)
    socket.join(data)
  })
  // setInterval(() => {
    // PVYmW8wZdJsXNNDcAAAY
  //   console.log("sending reqs")
  //   socket.emit("fetchChats","ab");
  // }, 10000);

  //end chat and fetch chats
    socket.on('chatEnd', (data) => {
      console.log('chatEnd ', data)
      socket.to(data).emit("fetchChats",data);
    })
//fetch interations
    socket.on('fetchInteractions',(data) => {
      console.log('fetchInteractions', data)
      socket.to(data).emit("fetchChats",data);
    })

    socket.on("agentJoined", data => {
      console.log("agentJoin " + JSON.stringify(data))
      socket.to(data.room).emit("agentJoinedMessage", {agentId:data.agentId,agentName:data.agentName});
    // socket.to(data.room).emit("getMessage", data.agentName);

    })

    //send message 
   socket.on("sendMessage", (data) => {
    console.log(data.room)
    console.log("data + " + data.message)
    socket.to(data.room).emit("getMessage", data.message);
   })

   //agentChatENd
   socket.on("agentChatEnd", (data) => {
    console.log("in agentChatEnd", data.room )
    socket.to(data.room).emit("agentChatEndMessage");
   })

})
